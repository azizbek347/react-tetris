{"version":3,"sources":["utils/tetromino.js","components/tetris-cell/tetris-cell.jsx","components/tetris-cell/index.js","components/restart-overlay/restart-overlay.jsx","components/restart-overlay/index.js","components/tetris-board/tetris-board.jsx","components/tetris-board/index.js","components/tetris/tetris.jsx","components/tetris/index.js","utils/deepClone.js","utils/gameHelpers.js","state.js","App.js","index.js"],"names":["TETROMINOS","shape","color","I","J","L","O","S","T","Z","StyledTetrisCell","styled","div","props","TetrisCell","type","memo","StyledOverlay","StyledInner","StyledButton","button","StyledTitle","p","RestartOverlay","startGame","onClick","StyledTetrisBoard","height","width","TetrisBoard","stage","isPlaying","length","map","row","rowIndex","col","colIndex","StyledWrapper","Tetris","observer","store","movePlayer","playerRotate","drop","tetrisRef","useRef","throttledMove","useMemo","throttle","code","useEffect","cancel","current","focus","tabIndex","onKeyDown","ref","forEach","array","iteratee","index","clone","target","WeakMap","isArray","Array","cloneTarget","get","set","value","Object","keys","key","generateBoard","checkCollision","player","moveX","x","moveY","y","tetromino","pos","rotateMatrix","matrix","dir","rotatedMatrix","_","reverse","State","HEIGHT","WIDTH","intervalID","collided","makeObservable","this","observable","action","bound","updatePlayerPos","resetPlayer","updateStage","sweepRows","setInterval","TIMING","tetrominos","randTetromino","Math","floor","random","randomTetromino","clearInterval","newStage","cell","clonedPlayer","deepClone","offset","reduce","ack","findIndex","unshift","fill","push","App","className","state","render","StrictMode","document","getElementById"],"mappings":"oMAAaA,EAAa,CACtB,EAAG,CAACC,MAAO,CAAC,CAAC,IAAKC,MAAO,eACzBC,EAAG,CACCF,MAAO,CACH,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,IAEhBC,MAAO,cAEXE,EAAG,CACCH,MAAO,CACH,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,IAAK,IAAK,IAEfC,MAAO,aAEXG,EAAG,CACCJ,MAAO,CACH,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,MAEbC,MAAO,cAEXI,EAAG,CACCL,MAAO,CACH,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,MAAO,aAEXK,EAAG,CACCN,MAAO,CACH,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,EAAG,IAEXC,MAAO,aAEXM,EAAG,CACCP,MAAO,CACH,CAAC,EAAG,EAAG,GACP,CAAC,IAAK,IAAK,KACX,CAAC,EAAG,IAAK,IAEbC,MAAO,eAEXO,EAAG,CACCR,MAAO,CACH,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,EAAG,IAEXC,MAAO,e,OCpDTQ,EAAmBC,IAAOC,IAAV,sGAGI,SAAAC,GAAK,OAAIA,EAAMX,SAGnCY,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OAAY,cAACL,EAAD,CAAkBR,MAAOF,EAAWe,GAAX,SCTzCD,EDWAE,eAAKF,GEVdG,EAAgBN,IAAOC,IAAV,mLAWbM,EAAcP,IAAOC,IAAV,mDAIXO,EAAeR,IAAOS,OAAV,sNAaZC,EAAcV,IAAOW,EAAV,wKC7BFC,EDuCQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,UAAF,OACnB,cAACP,EAAD,UACI,eAACC,EAAD,WACI,cAACG,EAAD,yEACA,cAACF,EAAD,CAAcM,QAASD,EAAvB,uCExCNE,EAAoBf,IAAOC,IAAV,sZAEQ,SAAAC,GAAK,OAAIA,EAAMc,UAAuB,SAAAd,GAAK,OAAIA,EAAMe,SAClD,SAAAf,GAAK,OAAIA,EAAMe,SCNlCC,EDsBK,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,UAAWP,EAApB,EAAoBA,UAApB,OAChB,eAACE,EAAD,CAAmBC,OAAQG,EAAME,OAAQJ,MAAOE,EAAM,GAAGE,OAAzD,UACKF,EAAMG,KAAI,SAACC,EAAKC,GAAN,OAAmBD,EAAID,KAAI,SAACG,EAAKC,GAAN,OAAmB,cAAC,EAAD,CAA4CtB,KAAMqB,EAAI,IAAtD,UAAoBD,EAApB,YAAgCE,WACvFN,GAAa,cAAC,EAAD,CAAgBP,UAAWA,Q,iBElB5Cc,EAAgB3B,IAAOC,IAAV,8GCPJ2B,EDcAC,aAAS,YAAc,IAAZC,EAAW,EAAXA,MACfX,EAA+DW,EAA/DX,MAAOY,EAAwDD,EAAxDC,WAAYC,EAA4CF,EAA5CE,aAAcC,EAA8BH,EAA9BG,KAAMpB,EAAwBiB,EAAxBjB,UAAWO,EAAaU,EAAbV,UACnDc,EAAYC,mBAEZC,EAAgBC,mBAAQ,kBAAMC,KAAS,YACrC,OADiD,EAAVC,MAEnC,IAAK,aACDR,EAAW,GACX,MAEJ,IAAK,YACDA,GAAY,GACZ,MAEJ,IAAK,UACDC,EAAa,GACb,MAEJ,IAAK,YACDC,IACA,MAEJ,QACI,UAhCC,OAkCK,CAACD,EAAcD,EAAYE,IAOjD,OAJAO,qBAAU,kBAAM,kBAAMJ,EAAcK,YAAU,CAACL,IAE/CI,qBAAU,kBAAMN,EAAUQ,QAAQC,UAAS,CAACvB,IAErC,cAACO,EAAD,CAAeiB,SAAS,IAAIC,UAAWT,EAAeU,IAAKZ,EAA3D,SACH,cAAC,EAAD,CAAaf,MAAOA,EAAOC,UAAWA,EAAWP,UAAWA,S,+BEhD9DkC,EAAU,SAACC,EAAOC,GAGpB,IAFA,IAAIC,GAAS,EACP7B,EAAS2B,EAAM3B,SACZ6B,EAAQ7B,GAAQ4B,EAASD,EAAME,GAAQA,GAChD,OAAOF,GAiBIG,EAdD,SAACC,GAAiC,IAAzB9B,EAAwB,uDAAlB,IAAI+B,QAC7B,GAAsB,kBAAXD,EAAqB,CAC5B,IAAME,EAAUC,MAAMD,QAAQF,GAC1BI,EAAcF,EAAU,GAAK,GACjC,OAAIhC,EAAImC,IAAIL,GAAgB9B,EAAImC,IAAIL,IACpC9B,EAAIoC,IAAIN,EAAQI,GAChBF,EAAUP,EAAQK,GAAQ,SAACO,EAAOT,GAAR,OAAkBM,EAAYN,GAASS,KAC7DZ,EAAQa,OAAOC,KAAKT,IAAS,SAACU,GAAD,OAASN,EAAYM,GAAOV,EAAOU,MAC7DN,GAEP,OAAOJ,G,OCjBFW,EAAgB,SAAC/C,EAAQC,GAAT,OACzB,YAAIsC,MAAMvC,IAASM,KAAI,kBACnB,YAAIiC,MAAMtC,IAAQK,KAAI,iBAAM,CAAC,EAAG,gBAI3B0C,EAAiB,SAACC,EAAQ9C,EAAT,GAC1B,IADoE,IAAtB+C,EAAqB,EAAxBC,EAAaC,EAAW,EAAdC,EAC5CA,EAAI,EAAGA,EAAIJ,EAAOK,UAAUjD,OAAQgD,IACzC,IAAK,IAAIF,EAAI,EAAGA,EAAIF,EAAOK,UAAUD,GAAGhD,OAAQ8C,IAC5C,GAA+B,IAA3BF,EAAOK,UAAUD,GAAGF,MACfhD,EAAMkD,EAAIJ,EAAOM,IAAIF,EAAID,KACtBjD,EAAMkD,EAAIJ,EAAOM,IAAIF,EAAID,GAAOD,EAAIF,EAAOM,IAAIJ,EAAID,IACa,UAAjE/C,EAAMkD,EAAIJ,EAAOM,IAAIF,EAAID,GAAOD,EAAIF,EAAOM,IAAIJ,EAAID,GAAO,IAC7D,OAAO,GAOdM,EAAe,SAACC,EAAQC,GACjC,IAAMC,EAAgBF,EAAOnD,KAAI,SAACsD,EAAG1B,GAAJ,OAAcuB,EAAOnD,KAAI,SAAAG,GAAG,OAAIA,EAAIyB,SACrE,OAAOwB,EAAM,EAAIC,EAAcrD,KAAI,SAAAC,GAAG,OAAIA,EAAIsD,aAAaF,EAAcE,WCjBvEC,E,WAcF,aAAe,yBATf3D,MAAQ4C,EAAce,EAAMC,OAAQD,EAAME,OAS5B,KARd5D,WAAY,EAQE,KAPd6D,WAAa,KAOC,KANdhB,OAAS,CACLM,IAAK,CAACJ,EAAG,EAAGE,GAAI,GAChBC,UAAWjF,EAAW,GAAGC,MACzB4F,UAAU,GAIVC,YAAeC,KAAM,CACjBjE,MAAOkE,IACPjE,UAAWiE,IACXJ,WAAYI,IACZpB,OAAQoB,IACRxE,UAAWyE,IAAOC,MAClBxD,WAAYuD,IAAOC,MACnBC,gBAAiBF,IAAOC,MACxBE,YAAaH,IAAOC,MACpBtD,KAAMqD,IAAOC,MACbG,YAAaJ,IAAOC,MACpBvD,aAAcsD,IAAOC,MACrBI,UAAWL,IAAOC,QAGtBH,KAAKvE,Y,6CAGT,WACIuE,KAAKjE,MAAQ4C,EAAce,EAAMC,OAAQD,EAAME,OAC/CI,KAAKK,cACLL,KAAKH,WAAaW,YAAYR,KAAKnD,KAAM6C,EAAMe,QAC/CT,KAAKhE,WAAY,I,wBAGrB,SAAWsD,GACFV,EAAeoB,KAAKnB,OAAQmB,KAAKjE,MAAO,CAACgD,EAAGO,EAAKL,EAAG,KACrDe,KAAKI,gBAAgB,CAACrB,EAAGO,EAAKL,EAAG,M,6BAIzC,YAAmC,IAAlBF,EAAiB,EAAjBA,EAAGE,EAAc,EAAdA,EAAGa,EAAW,EAAXA,SACnBE,KAAKnB,OAAL,2BACOmB,KAAKnB,QADZ,IAEIM,IAAK,CAACJ,EAAGiB,KAAKnB,OAAOM,IAAIJ,EAAIA,EAAGE,EAAGe,KAAKnB,OAAOM,IAAIF,EAAIA,GACvDa,aAEJE,KAAKM,gB,yBAGT,WACI,IAAMpB,EAAYE,EXDK,WAC3B,IAAMsB,EAAa,UACbC,EAAgBD,EAAWE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAWzE,SACvE,OAAOhC,EAAW0G,GWFiBI,GAAkB7G,MAAO0G,KAAKE,SAAW,GAAM,GAAK,GAC7E/B,EAAI6B,KAAKC,OAAOnB,EAAME,MAAQV,EAAUjD,QAAU,GACxD+D,KAAKnB,OAAS,CACVM,IAAK,CAACJ,IAAGE,GAAI,GACbC,YACAY,UAAU,K,kBAIlB,WACSlB,EAAeoB,KAAKnB,OAAQmB,KAAKjE,MAAO,CAACgD,EAAG,EAAGE,EAAG,IAG/Ce,KAAKnB,OAAOM,IAAIF,EAAI,GACpB+B,cAAchB,KAAKH,YACnBG,KAAKhE,WAAY,GAEjBgE,KAAKI,gBAAgB,CAACrB,EAAG,EAAGE,EAAG,EAAGa,UAAU,IANhDE,KAAKI,gBAAgB,CAACrB,EAAG,EAAGE,EAAG,EAAGa,UAAU,M,yBAWpD,WAAiC,IAAD,OAApB/D,EAAoB,uDAAZiE,KAAKjE,MACfkF,EAAWlF,EAAMG,KAAI,SAAAC,GAAG,OAAIA,EAAID,KAAI,SAAAgF,GAAI,MAAgB,UAAZA,EAAK,GAAiB,CAAC,EAAG,SAAWA,QACvFlB,KAAKnB,OAAOK,UAAUvB,SAAQ,SAACxB,EAAK8C,GAChC9C,EAAIwB,SAAQ,SAACY,EAAOQ,GACF,IAAVR,IACA0C,EAAShC,EAAI,EAAKJ,OAAOM,IAAIF,GAAGF,EAAI,EAAKF,OAAOM,IAAIJ,GAAK,CAACR,EAAD,UAAW,EAAKM,OAAOiB,SAAW,SAAW,iBAIlHE,KAAKjE,MAAQkF,EACTjB,KAAKnB,OAAOiB,WACZE,KAAKK,cACLL,KAAKO,UAAUU,M,0BAIvB,SAAa3B,GAA0B,IAArBvD,EAAoB,uDAAZiE,KAAKjE,MACrBoF,EAAeC,EAAUpB,KAAKnB,QACpCsC,EAAajC,UAAYE,EAAa+B,EAAajC,UAAWI,GAE9D,IADA,IAAI+B,EAAS,EACNzC,EAAeuC,EAAcpF,EAAO,CAACgD,EAAG,EAAGE,EAAG,KAGjD,GAFAkC,EAAahC,IAAIJ,GAAKsC,GACtBA,IAAWA,GAAUA,EAAS,EAAI,GAAK,KAC1BF,EAAajC,UAAU,GAAGjD,OAAQ,OAEnD+D,KAAKnB,OAASsC,EACdnB,KAAKM,gB,uBAGT,SAAUW,GACN,IAAMlF,EAAQkF,EAASK,QAAO,SAACC,EAAKpF,GAChC,OAA8C,IAA1CA,EAAIqF,WAAU,SAAAN,GAAI,OAAgB,IAAZA,EAAK,OAC3BK,EAAIE,QAAQ,IAAItD,MAAM8C,EAAS,GAAGhF,QAAQyF,KAAK,CAAC,EAAG,WAC5CH,IAEXA,EAAII,KAAKxF,GACFoF,KACR,IACHvB,KAAKjE,MAAQA,M,KApHf2D,EACKC,OAAS,GADdD,EAEKE,MAAQ,GAFbF,EAGKe,OAAS,IAqHL,UAAIf,EClHJkC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,CAAQnF,MAAOoF,OCDrBC,iBACI,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.3458042e.chunk.js","sourcesContent":["export const TETROMINOS = {\r\n    0: {shape: [[0]], color: '255,255,255'},\r\n    I: {\r\n        shape: [\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n        ],\r\n        color: '97,237,205'\r\n    },\r\n    J: {\r\n        shape: [\r\n            [0, 'J', 0],\r\n            [0, 'J', 0],\r\n            ['J', 'J', 0],\r\n        ],\r\n        color: '8,107,255'\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, 'L', 0],\r\n            [0, 'L', 0],\r\n            [0, 'L', 'L'],\r\n        ],\r\n        color: '255,155,33'\r\n    },\r\n    O: {\r\n        shape: [\r\n            ['O', 'O'],\r\n            ['O', 'O'],\r\n        ],\r\n        color: '00,15,255'\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, 'S', 'S'],\r\n            ['S', 'S', 0],\r\n            [0, 0, 0],\r\n        ],\r\n        color: '99,228,64'\r\n    },\r\n    T: {\r\n        shape: [\r\n            [0, 0, 0],\r\n            ['T', 'T', 'T'],\r\n            [0, 'T', 0],\r\n        ],\r\n        color: '208,126,255'\r\n    },\r\n    Z: {\r\n        shape: [\r\n            ['Z', 'Z', 0],\r\n            [0, 'Z', 'Z'],\r\n            [0, 0, 0],\r\n        ],\r\n        color: '255,77,103'\r\n    }\r\n};\r\n\r\nexport const randomTetromino = ()=> {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n}","import styled from 'styled-components';\r\nimport {TETROMINOS} from '../../utils/tetromino';\r\nimport {memo} from \"react\";\r\n\r\nconst StyledTetrisCell = styled.div`\r\n  width: auto;\r\n  border: 1px solid #000;\r\n  background-color: rgb(${props => props.color});\r\n`;\r\n\r\nconst TetrisCell = ({type}) => <StyledTetrisCell color={TETROMINOS[type]['color']}/>\r\n\r\nexport default memo(TetrisCell);","import TetrisCell from \"./tetris-cell\";\r\nexport default TetrisCell;","import styled from \"styled-components\";\r\n\r\nconst StyledOverlay = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.75);\r\n  display: grid;\r\n  place-items: center;\r\n`;\r\n\r\nconst StyledInner = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  border-radius: .5em;\r\n  border: none;\r\n  padding: 1em;\r\n  font-size: 1.2em;\r\n  background-color: #917B64;\r\n  color: #ffffff;\r\n  cursor: pointer;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst StyledTitle = styled.p`\r\n  font-size: 3em;\r\n  color: #FF4D69;\r\n  margin: 0 0 1em;\r\n  white-space: nowrap;\r\n  @media (min-width: 1170px) {\r\n    font-size: 4em;\r\n  }\r\n`;\r\n\r\nconst RestartOverlay = ({startGame}) => (\r\n    <StyledOverlay>\r\n        <StyledInner>\r\n            <StyledTitle>Конец игры!!!</StyledTitle>\r\n            <StyledButton onClick={startGame}>Еще?</StyledButton>\r\n        </StyledInner>\r\n    </StyledOverlay>\r\n);\r\n\r\n\r\nexport default RestartOverlay;","import RestartOverlay from \"./restart-overlay\";\r\nexport default RestartOverlay;","import styled from 'styled-components'\r\nimport TetrisCell from \"../tetris-cell\";\r\nimport RestartOverlay from \"../restart-overlay\";\r\n\r\nconst StyledTetrisBoard = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(${props => props.height}, calc(40vh / ${props => props.width}));\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 2px;\r\n  padding: 2px;\r\n  border: 1px solid #333;\r\n  max-width: 320px;\r\n  min-width: 320px;\r\n  width: 100%;\r\n  position: relative;\r\n  @media (min-width: 768px) {\r\n    max-width: 400px;\r\n  }\r\n  @media (min-width: 1170px) {\r\n    max-width: 480px;\r\n  }\r\n`;\r\n\r\nconst TetrisBoard = ({stage, isPlaying, startGame}) => (\r\n    <StyledTetrisBoard height={stage.length} width={stage[0].length}>\r\n        {stage.map((row, rowIndex) => row.map((col, colIndex) => <TetrisCell key={`${rowIndex} ${colIndex}`} type={col[0]}/>))}\r\n        {!isPlaying && <RestartOverlay startGame={startGame}/>}\r\n    </StyledTetrisBoard>\r\n);\r\n\r\nexport default TetrisBoard;","import TetrisBoard from \"./tetris-board\";\r\nexport default TetrisBoard;","import {observer} from 'mobx-react';\r\nimport TetrisBoard from \"../tetris-board\";\r\nimport styled from 'styled-components'\r\nimport throttle from 'lodash.throttle';\r\nimport {useMemo, useEffect, useRef} from \"react\";\r\n\r\nconst throttleTime = 200;\r\n\r\nconst StyledWrapper = styled.div`\r\n  outline: none;\r\n  min-height: 100vh;\r\n  display: grid;\r\n  place-items: center;\r\n`;\r\n\r\nconst Tetris = observer(({store}) => {\r\n    const {stage, movePlayer, playerRotate, drop, startGame, isPlaying} = store;\r\n    const tetrisRef = useRef();\r\n\r\n    const throttledMove = useMemo(() => throttle(({code}) => {\r\n            switch (code) {\r\n                case 'ArrowRight': {\r\n                    movePlayer(1);\r\n                    break;\r\n                }\r\n                case 'ArrowLeft': {\r\n                    movePlayer(-1);\r\n                    break;\r\n                }\r\n                case 'ArrowUp': {\r\n                    playerRotate(1)\r\n                    break;\r\n                }\r\n                case 'ArrowDown': {\r\n                    drop()\r\n                    break;\r\n                }\r\n                default:\r\n                    return;\r\n            }\r\n        }, throttleTime), [playerRotate, movePlayer, drop]\r\n    );\r\n\r\n    useEffect(() => () => throttledMove.cancel(), [throttledMove]);\r\n\r\n    useEffect(() => tetrisRef.current.focus(), [isPlaying]);\r\n\r\n    return <StyledWrapper tabIndex='0' onKeyDown={throttledMove} ref={tetrisRef}>\r\n        <TetrisBoard stage={stage} isPlaying={isPlaying} startGame={startGame}/>\r\n    </StyledWrapper>;\r\n});\r\n\r\nexport default Tetris;","import Tetris from \"./tetris\";\r\nexport default Tetris;","const forEach = (array, iteratee) => {\r\n    let index = -1;\r\n    const length = array.length;\r\n    while (++index < length) iteratee(array[index], index);\r\n    return array;\r\n}\r\n\r\nconst clone = (target, map = new WeakMap()) => {\r\n    if (typeof target === 'object') {\r\n        const isArray = Array.isArray(target);\r\n        let cloneTarget = isArray ? [] : {};\r\n        if (map.get(target)) return map.get(target);\r\n        map.set(target, cloneTarget);\r\n        isArray ? forEach(target, (value, index) => cloneTarget[index] = value) :\r\n            forEach(Object.keys(target), (key) => cloneTarget[key] = target[key]);\r\n        return cloneTarget;\r\n    } else {\r\n        return target;\r\n    }\r\n}\r\n\r\nexport default clone;","export const generateBoard = (height, width) => (\r\n    [...Array(height)].map(() => (\r\n        [...Array(width)].map(() => [0, 'clear'])\r\n    ))\r\n);\r\n\r\nexport const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\r\n    for (let y = 0; y < player.tetromino.length; y++) {\r\n        for (let x = 0; x < player.tetromino[y].length; x++) {\r\n            if (player.tetromino[y][x] !== 0) {\r\n                if (!stage[y + player.pos.y + moveY]\r\n                    || !stage[y + player.pos.y + moveY][x + player.pos.x + moveX]\r\n                    || stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear') {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const rotateMatrix = (matrix, dir) => {\r\n    const rotatedMatrix = matrix.map((_, index) => matrix.map(col => col[index]));\r\n    return dir > 0 ? rotatedMatrix.map(row => row.reverse()) : rotatedMatrix.reverse();\r\n}\r\n","import {action, observable, makeObservable} from 'mobx'\r\nimport deepClone from \"./utils/deepClone\";\r\nimport {randomTetromino, TETROMINOS} from './utils/tetromino'\r\nimport {checkCollision, generateBoard, rotateMatrix} from './utils/gameHelpers';\r\n\r\nclass State {\r\n    static HEIGHT = 20;\r\n    static WIDTH = 10;\r\n    static TIMING = 1000;\r\n\r\n    stage = generateBoard(State.HEIGHT, State.WIDTH);\r\n    isPlaying = true;\r\n    intervalID = null;\r\n    player = {\r\n        pos: {x: 0, y: -1},\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false\r\n    }\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            stage: observable,\r\n            isPlaying: observable,\r\n            intervalID: observable,\r\n            player: observable,\r\n            startGame: action.bound,\r\n            movePlayer: action.bound,\r\n            updatePlayerPos: action.bound,\r\n            resetPlayer: action.bound,\r\n            drop: action.bound,\r\n            updateStage: action.bound,\r\n            playerRotate: action.bound,\r\n            sweepRows: action.bound,\r\n        })\r\n\r\n        this.startGame();\r\n    }\r\n\r\n    startGame() {\r\n        this.stage = generateBoard(State.HEIGHT, State.WIDTH);\r\n        this.resetPlayer();\r\n        this.intervalID = setInterval(this.drop, State.TIMING);\r\n        this.isPlaying = true;\r\n    }\r\n\r\n    movePlayer(dir) {\r\n        if (!checkCollision(this.player, this.stage, {x: dir, y: 0})) {\r\n            this.updatePlayerPos({x: dir, y: 0});\r\n        }\r\n    }\r\n\r\n    updatePlayerPos({x, y, collided}) {\r\n        this.player = {\r\n            ...this.player,\r\n            pos: {x: this.player.pos.x + x, y: this.player.pos.y + y},\r\n            collided\r\n        };\r\n        this.updateStage();\r\n    }\r\n\r\n    resetPlayer() {\r\n        const tetromino = rotateMatrix(randomTetromino().shape, Math.random() > 0.5 ? 1 : -1);\r\n        const x = Math.floor((State.WIDTH - tetromino.length) / 2);\r\n        this.player = {\r\n            pos: {x, y: -1},\r\n            tetromino,\r\n            collided: false\r\n        }\r\n    }\r\n\r\n    drop() {\r\n        if (!checkCollision(this.player, this.stage, {x: 0, y: 1})) {\r\n            this.updatePlayerPos({x: 0, y: 1, collided: false});\r\n        } else {\r\n            if (this.player.pos.y < 1) {\r\n                clearInterval(this.intervalID);\r\n                this.isPlaying = false;\r\n            } else {\r\n                this.updatePlayerPos({x: 0, y: 0, collided: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    updateStage(stage = this.stage) {\r\n        const newStage = stage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\r\n        this.player.tetromino.forEach((row, y) => {\r\n            row.forEach((value, x) => {\r\n                if (value !== 0) {\r\n                    newStage[y + this.player.pos.y][x + this.player.pos.x] = [value, `${this.player.collided ? 'merged' : 'clear'}`]\r\n                }\r\n            })\r\n        })\r\n        this.stage = newStage;\r\n        if (this.player.collided) {\r\n            this.resetPlayer();\r\n            this.sweepRows(newStage);\r\n        }\r\n    }\r\n\r\n    playerRotate(dir, stage = this.stage) {\r\n        const clonedPlayer = deepClone(this.player);\r\n        clonedPlayer.tetromino = rotateMatrix(clonedPlayer.tetromino, dir);\r\n        let offset = 1;\r\n        while (checkCollision(clonedPlayer, stage, {x: 0, y: 0})) {\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n            if (offset > clonedPlayer.tetromino[0].length) return;\r\n        }\r\n        this.player = clonedPlayer;\r\n        this.updateStage();\r\n    }\r\n\r\n    sweepRows(newStage) {\r\n        const stage = newStage.reduce((ack, row) => {\r\n            if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                ack.unshift(new Array(newStage[0].length).fill([0, 'clear']))\r\n                return ack;\r\n            }\r\n            ack.push(row);\r\n            return ack;\r\n        }, []);\r\n        this.stage = stage;\r\n    }\r\n}\r\n\r\nexport default new State();\r\n","import Tetris from './components/tetris';\nimport state from './state';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tetris store={state}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nrender(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}